{
    "title":"About defensive programming",
    "subtitle":""
}

${slide:title=Defensive Example}$

[[[
BlLayoutCommonConstraints >> padding: aBlPadding
	"Change element's margin to a BlMargin. aBlPadding must not be nil."
	self
		assert: [ aBlPadding isNotNil ]
		description: [ 'Padding must not be nil' ].
	
	padding := aBlPadding
]]]


${slide:title=Drawbacks of the approach}$

- Runtime cost
- Assertions are optional so we should not consider that they are executed.


${slide:title=Defensive Example 2}$

[[[
BlLayoutCommonConstraints >> padding: aBlPadding
	"Change element's margin to a BlMargin. aBlPadding must not be nil."
	
	
	aBlPadding isNil
		ifTrue: [ 'Padding must not be nil' ].
	
	padding := aBlPadding
]]]

- What is the goal here? that padding does not break
- But I can still write ==x padding: aJunkObject==
- So the test is not good and worth

${slide:title=Better setter}$

[[[
BlLayoutCommonConstraints >> padding: aBlPadding
	"Change element's margin to a BlMargin. aBlPadding must not be nil."
	
	padding := aBlPadding
]]]


${slide:title=Defensive Example 2}$

[[[
BlEvent >> source
	"Return an event target that plays a role of a source of this event"

	self
		assert: [ self hasSource ]
		description: [ 'Can not access a source if there is no one' ].
		
	^ source
]]]


${slide:title=Defensive Example Alternative 2}$

[[[
BlEvent >> source
	"Return an event target that plays a role of a source of this event"
	
	^ source
]]]

- We will return ==nil== or a source.



${slide:title=Defensive Example Alternative 2}$

[[[
BlEvent >> source
	"Return an event target that plays a role of a source of this event"

	self hasSource 
		ifFalse: [ self error: 'Can not access a source if there is no one' ].
	
	^ source
]]]

- We could catch the error if needed.



${slide:title=Conclusion}$

- Architecture should not promote global variable usage
- Avoid Singleton/Facade, these are anti-patterns
- Our theory is that Facade is only "useful" for Compiler :)





